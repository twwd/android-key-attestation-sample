package de.twwd.keyattestationsample

import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.ClipboardManager
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import de.twwd.keyattestationsample.crypto.KeyManager
import de.twwd.keyattestationsample.crypto.KeyManagerFake
import de.twwd.keyattestationsample.crypto.KeyManagerImpl
import de.twwd.keyattestationsample.ui.theme.KeyAttestationSampleTheme
import kotlinx.coroutines.launch

const val TAG = "KeyAttestationSample"

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            KeyAttestationSampleTheme {
                Scaffold(
                    topBar = {
                        TopAppBar {
                            Text(
                                text = "Key Attestation Sample", maxLines = 1,
                                style = MaterialTheme.typography.subtitle1,
                                overflow = TextOverflow.Ellipsis,
                                textAlign = TextAlign.Center,
                                modifier = Modifier.fillMaxWidth()
                            )
                        }
                    }
                ) { paddingValues ->
                    KeyManagerStuff(paddingValues)
                }
            }
        }
    }
}

@Composable
fun KeyManagerStuff(
    paddingValues: PaddingValues,
    keyManager: KeyManager = KeyManagerImpl(LocalContext.current)
) {
    val composableScope = rememberCoroutineScope()
    var error by remember {
        mutableStateOf("")
    }
    var isKeyGenerated by remember {
        mutableStateOf(keyManager.isKeyGenerated())
    }
    val clipboardManager: ClipboardManager = LocalClipboardManager.current
    val context = LocalContext.current

    val errorHandler = { runnable: () -> Unit ->
        error = ""
        try {
            runnable()
        } catch (e: Exception) {
            error = e.stackTraceToString()
        }
    }

    Column(
        modifier = Modifier
            .padding(
                bottom = paddingValues.calculateBottomPadding() + 32.dp,
                start = 32.dp,
                end = 32.dp,
                top = paddingValues.calculateTopPadding() + 32.dp
            )
    ) {
        Row(
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            modifier = Modifier.fillMaxWidth()
        ) {
            Button(
                onClick = {
                    errorHandler {
                        composableScope.launch {
                            keyManager.generateKey("abc".encodeToByteArray())
                            isKeyGenerated = true
                            Toast.makeText(context, "Key generated", Toast.LENGTH_SHORT).show()
                        }
                    }
                },
                enabled = !isKeyGenerated
            ) {
                Text(text = "Generate key")
            }

            Button(
                onClick = {
                    errorHandler {
                        composableScope.launch {
                            keyManager.deleteKey()
                            isKeyGenerated = false
                            Toast.makeText(context, "Key deleted", Toast.LENGTH_SHORT).show()
                        }
                    }
                },
                enabled = isKeyGenerated
            ) {
                Text(text = "Delete key")
            }
        }

        Button(
            onClick = {
                errorHandler {
                    composableScope.launch {
                        Log.i(TAG, keyManager.loadKeyAttestationCertificateChain().toString())
                        Toast.makeText(
                            context,
                            "Key attestation certificate chain loaded",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            },
            enabled = isKeyGenerated
        ) {
            Text(text = "Get attestation certificate chain")
        }
        TextField(
            modifier = Modifier
                .padding(top = 32.dp)
                .weight(1f)
                .fillMaxWidth(),
            value = error,
            onValueChange = {},
            readOnly = true,
            textStyle = TextStyle(fontFamily = FontFamily.Monospace, fontSize = 10.sp),
            label = { Text("Error") }
        )

        Button(
            onClick = {
                clipboardManager.setText(AnnotatedString(error))
                Toast.makeText(context, "Error copied", Toast.LENGTH_SHORT).show()
            },
            enabled = error.isNotBlank()
        ) {
            Text(text = "Copy error")
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun DefaultPreview() {
    KeyAttestationSampleTheme {
        KeyManagerStuff(paddingValues = PaddingValues(32.dp), keyManager = KeyManagerFake())
    }
}